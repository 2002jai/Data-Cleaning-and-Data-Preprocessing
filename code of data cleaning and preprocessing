import pandas as pd
import numpy as np

# Data Cleaning

# Removing duplicates
df = df.drop_duplicates()

# Handling missing values
df = df.dropna()  # Remove rows with any missing values
df['column_name'] = df['column_name'].fillna(value)  # Fill missing values with a specific value

# Handling outliers
Q1 = df['column_name'].quantile(0.25)
Q3 = df['column_name'].quantile(0.75)
IQR = Q3 - Q1
df = df[(df['column_name'] >= Q1 - 1.5 * IQR) & (df['column_name'] <= Q3 + 1.5 * IQR)]

# Handling inconsistent data
df['column_name'] = df['column_name'].str.lower()  # Convert text to lowercase
df['column_name'] = df['column_name'].str.strip()  # Remove leading and trailing spaces

# Data Preprocessing

# Feature scaling
from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()
df['column_name'] = scaler.fit_transform(df[['column_name']])

# Feature encoding
from sklearn.preprocessing import LabelEncoder

encoder = LabelEncoder()
df['categorical_column'] = encoder.fit_transform(df['categorical_column'])

# One-Hot encoding
df = pd.get_dummies(df, columns=['categorical_column'])

# Handling datetime features
df['datetime_column'] = pd.to_datetime(df['datetime_column'])  # Convert to datetime format
df['year'] = df['datetime_column'].dt.year
df['month'] = df['datetime_column'].dt.month
df['day'] = df['datetime_column'].dt.day

# Dimensionality reduction
from sklearn.decomposition import PCA

pca = PCA(n_components=2)
df_pca = pca.fit_transform(df[['feature1', 'feature2']])

# Handling imbalanced classes
from imblearn.over_sampling import SMOTE

smote = SMOTE()
X_resampled, y_resampled = smote.fit_resample(df[['feature1', 'feature2']], df['target'])

# Handling text data
from sklearn.feature_extraction.text import CountVectorizer

vectorizer = CountVectorizer()
X = vectorizer.fit_transform(df['text_column'])
